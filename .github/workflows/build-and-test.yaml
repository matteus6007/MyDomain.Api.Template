name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  SOURCE_DIRECTORY: "./src"
  HUSKY: 0
  APPLICATION_NAME: "mydomain-api"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Install dependencies
      run: dotnet restore $SOURCE_DIRECTORY
    - name: Build
      run: dotnet build $SOURCE_DIRECTORY
    - name: Linting
      run: |
        FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.pull_request.base.sha }} HEAD)
        dotnet format $SOURCE_DIRECTORY --verify-no-changes --no-restore --include $FILES_CHANGED --severity error -v diagnostic --report ./testresults/

  test:
    runs-on: ubuntu-latest
    
    permissions:
      checks: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    - name: Launch local test environment
      run: docker-compose -f docker-compose.dev-env.yml up -d

    - name: Init Terraform (AWS)
      run: docker-compose -f docker-compose.dev-terraform.yml run --rm terraform init

    - name: Apply Terraform (AWS)
      if: success()
      run: docker-compose -f docker-compose.dev-terraform.yml run --rm terraform apply -input=false -auto-approve

    - name: Launch Application
      if: always()
      run: docker-compose up -d --build

    - name: Test with docker compose
      run: docker-compose -f docker-compose.test.yml up --build --exit-code-from test

    - name: Schemathesis contract test
      uses: schemathesis/action@v1
      with:
        schema: "http://localhost:1001/swagger/v1/swagger.yaml"
        args: '-H "Authorization: Bearer ${{ secrets.AUTHORIZATION_TOKEN }}" --hypothesis-max-examples=2 --junit-xml junit-contracts.xml'
        token: ${{ secrets.SCHEMATHESIS_TOKEN }}

    - name: Save OAS
      run: |
        curl -X GET "http://localhost:1001/swagger/v1/swagger.yaml" >> docs/openapi.yaml

    - name: Pact - publish successful contract
      if: success()
      uses: pactflow/actions/publish-provider-contract@v1.2.0
      env:
        version: "1.0.${{github.run_number}}"
        application_name: $APPLICATION_NAME
        oas_file: "docs/openapi.yaml"
        results_file: "${{ github.workspace }}/junit-contracts.xml"
        REPORT_FILE_CONTENT_TYPE: "text/xml"
        PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
        PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

    - name: Code Coverage
      uses: codecov/codecov-action@v3
      if: always()
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: "${{ github.workspace }}/testresults/*.trx"

    - name: Destroy Terraform (AWS)
      if: always()
      run: docker-compose -f docker-compose.dev-terraform.yml run --rm terraform destroy -input=false -auto-approve

    - name: Teardown local test environment
      if: always()
      run: docker-compose -f docker-compose.dev-env.yml down -v --rmi local --remove-orphans

  test_report:
    needs: test

    runs-on: ubuntu-latest

    permissions:
      checks: write
      pull-requests: write
    
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts      
    - name: Publish Test Results
      id: test-results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        check_run_annotations_branch: "*"
        files: "artifacts/**/*.trx"
    - name: Set badge color
      shell: bash
      run: |
        case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
          success)
            echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
            ;;
          failure)
            echo "BADGE_COLOR=800000" >> $GITHUB_ENV
            ;;
          neutral)
            echo "BADGE_COLOR=696969" >> $GITHUB_ENV
            ;;
        esac    
    - name: Create badge
      uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
      with:
        label: Tests
        status: '${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.test-results.outputs.json ).conclusion }}'
        color: ${{ env.BADGE_COLOR }}
        path: tests.svg
    - name: Upload badge to Gist
      # Upload only for main branch
      if: >
        github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' ||
        github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
      uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
      with:
        token: ${{ secrets.GIST_TOKEN }}
        gistURL: https://gist.github.com/matteus6007/bcdf0ee6170070c0fcc68059569e76a7
        file: tests.svg
